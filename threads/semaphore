#!/bin/python3

import sys
import threading
import time
import random

COUNT = 20000
REMOVE_COUNT = 2500

## Synchronization via semaphone example(initialize with an internal counter)

glock = threading.Lock()
#semaphore = threading.Semaphore(0)

def main(argv):
	
	global glock
	
	print("Starting semaphore experiment")

	'''for i in range(0,3):
	
		t1 = threading.Thread(target=consumer())
		t2 = threading.Thread(target=producer())
	
		t1.start()
		t2.start()
		t1.join()
		t2.join()
	'''
	
	# So semaphore (N) should run in parallel
	sem = threading.Semaphore(4)
	
	threads = []
	
	for i in range(10):
	      tname = 'Worker_'+str(i)	
	      t = threading.Thread(target=guardResource, name=tname, args=(sem,threads))
	      t.start()
	      #t.join() Dont join the thread here else it would wait
        	
	
	print("Ending semaphore experiment")


def printRunningThreads(threads):

	print("Running:" + str(threads))
	

def guardResource(semaphore, threads):

	global glock
	
	currThrName = threading.currentThread().getName()
	print("Waiting to acquire a resource @ {}".format(currThrName))
	
	with semaphore:
	#semaphore.release()
		with glock:
	      		threads.append(currThrName)
		print("Running:" + str(threads))
		time.sleep(1)	
	#semaphore.acquire()
		with glock:
			threads.remove(currThrName)
		print(" Released resource @ {}".format(currThrName))
	


# When producer creates and item it releases the semaphore
def producer():

	global item
	print ("Producer launched")	
	time.sleep(5)
	
	item = random.randint(0, 1000)
	print ("Producer notify, produced item number {}".format(item))
	# Releases, increments internal counter by one
	# Zero indicates another is waiting for it to become larger than zero again, wake up that thread
	semaphore.release()   # <- PRODUCER is RELEASING only
	

def consumer():

	print("Consumer waiting ...")			
	
	semaphore.acquire()
	
	print ("Consumer notify, consumed item number {}".format(item))	
	
if __name__ == "__main__":main(sys.argv[0:])
