#!/bin/python3

import sys
from threading import Thread, Condition
import time
import random

# Thread syncronization with an event
# Event objects are used for communication between threads
# Event object manages an internal flag that can be set to true with the set method 
# and reset to false with the clear method

items = []
condition = Condition()

FULL_BUFFER = 10

class Producer(Thread):

	def __init__(self):
		super().__init__()
		
	def produce(self):
		
		global condition
		global items
		
		condition.acquire()
		
		if len(items) == FULL_BUFFER:
			condition.wait()
			
			print("Producer, total items produced {}. Full Buffer".format(len(items)))
		
		rand_item = random.randint(500,20000)
		items.append(rand_item)	
			
		print("Producer, produeed item {} total items produced {}".format(rand_item, len(items)))	
		
		condition.notify()
		condition.release()

	def run(self):
	
		for i in range(0,20):
			time.sleep(5)
			self.produce()					

class Consumer(Thread):

	def __init__(self):
		super().__init__()
		
	def consume(self):
		
		global condition
		global items
		
		condition.acquire()
		
		if len(items) == 0:
			condition.wait()
			print("Consumer notify: no item to consume")	
		
		popped = items.pop()
		
		print("Consumer, consumed an item {}".format(popped))
		
		print("Consumer, items left to consume are {}".format(len(items)))
		condition.notify()
		condition.release()
		
	def run(self):
	
		for i in range(0,20):
			time.sleep(10)
			self.consume()	
		

def main(argv):
	
	
	print("Starting syncronization with condition experiment")

	producer = Producer()
	consumer = Consumer()
	producer.start()
	consumer.start()
	producer.join()
	consumer.join()
        	
	
	print("Ending syncronization with condition experiment")



	
if __name__ == "__main__":main(sys.argv[0:])
