#!/bin/python3

import sys
import time
from threading import Thread, Condition

## Q 19.3 EPIP
## Print odd and even numbers in order without using locks
## In real scenario use a coordinator class to make sure it starst from even first.

condition = Condition()
RANGE = 100

class OddPrinter(Thread):

	def __init__(self):
		super().__init__()		

	def run(self):
		global condition
		
		with condition:
			
			for i in range(1,RANGE, 2):
				time.sleep(0.1)
				print(i)
				condition.notify()
				condition.wait()						

class EvenPrinter(Thread):

	def __init__(self):
		super().__init__()		

	def run(self):
		global condition
		
		with condition:
			
			for i in range(0,RANGE, 2):
				time.sleep(0.1)
				print(i)
				condition.notify()
				condition.wait()


def main(argv):	
	
	print("Starting syncronization with condition print even/odd")
	oddt = OddPrinter()
	event = EvenPrinter()
	
	event.start()
	oddt.start()
	
	event.join()
	oddt.join()
	print("Ending syncronization with condition experiment")
	
if __name__ == "__main__":main(sys.argv[0:])
